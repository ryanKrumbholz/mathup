{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js\";\nimport React from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\n\nconst Problem_Container = () => {\n  const random = new Random();\n  let problem;\n  let answer;\n  let answers = [];\n  let answersMap = new Map(); //TODO Create function to generate problem based on problem type\n\n  const genProblem = type => {\n    let p;\n    let n;\n    let k;\n    let ans;\n\n    switch (type) {\n      case 'additionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n\n      case 'additionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n\n      case 'addition':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n\n      case 'subtractionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n\n      case 'subtractionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n\n      case 'subtraction':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n\n      case 'multiplyOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n\n      case 'multiplyTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n\n      case 'multiply':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n    }\n\n    return [p, ans];\n  }; //TODO Create function to potential answers to problem\n\n\n  const genWrongAnswers = type => {// return WrongAnswers;\n  }; //Todo Create function to generate answer for problem\n\n\n  const genAnswer = (type, problem) => {}; //TODO Create function to get problem from db if problem cannot be auto generated;\n\n\n  const getProblem = type => {}; //TODO Create function to get answer from db if answer cannot be\n\n\n  const getAnswer = type => {};\n\n  const shuffle = array => {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = random.integer(0, currentIndex - 1);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const pushAnswers = () => {\n    answers.push(answer);\n    answersMap.set(answer, answer);\n\n    for (let i = 0; i < 3; i++) {\n      let val = random.integer(0, 20);\n\n      if (val !== answer) {\n        answers.push(val);\n        answersMap.set(val, val);\n      } else {\n        while (answersMap.has(val)) {\n          val = random.integer(0, 20);\n        }\n\n        answers.push(val);\n        answersMap.set(val, val);\n      }\n    }\n\n    answers = shuffle(answers);\n  }; // pushAnswers();\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Problem_Card, {\n      problem: problem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer_Container, {\n      answers: answers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Problem_Container;\nexport default Problem_Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Problem_Container\");","map":{"version":3,"sources":["/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js"],"names":["React","Problem_Card","Answer_Container","Random","Problem_Container","random","problem","answer","answers","answersMap","Map","genProblem","type","p","n","k","ans","integer","genWrongAnswers","genAnswer","getProblem","getAnswer","shuffle","array","currentIndex","length","temporaryValue","randomIndex","pushAnswers","push","set","i","val","has"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\n\nconst Problem_Container = () => {\n\n    const random = new Random();\n    let problem;\n    let answer;\n    let answers = [];\n    let answersMap = new Map();\n    \n\n    //TODO Create function to generate problem based on problem type\n    const genProblem = type => {\n        let p;\n        let n;\n        let k;\n        let ans;\n        switch (type) {\n            case 'additionOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n            case 'additionTens':\n                 n = random.integer(0,99);\n                 k = random.integer(0,99);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n            case 'addition': \n                 n = random.integer(0,999);\n                 k = random.integer(0,999);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n            case 'subtractionOnes':\n                 n = random.integer(0,9);\n                 k = random.integer(0,9);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n            case 'subtractionTens':\n                 n = random.integer(0,99);\n                 k = random.integer(0,99);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n            case 'subtraction':\n                 n = random.integer(0,999);\n                 k = random.integer(0,999);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n            case 'multiplyOnes':\n                 n = random.integer(0,9);\n                 k = random.integer(0,9);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n            case 'multiplyTens':\n                 n = random.integer(0,99);\n                 k = random.integer(0,99);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n            case 'multiply':\n                 n = random.integer(0,999);\n                 k = random.integer(0,999);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n\n        }\n        return [p, ans];\n    };\n\n    //TODO Create function to potential answers to problem\n    const genWrongAnswers = type => {\n        // return WrongAnswers;\n    };\n\n    //Todo Create function to generate answer for problem\n    const genAnswer = (type, problem) => {\n\n    }\n\n    //TODO Create function to get problem from db if problem cannot be auto generated;\n    const getProblem = type => {\n\n    }\n\n    //TODO Create function to get answer from db if answer cannot be\n    const getAnswer = type => {\n\n    }\n\n    const shuffle = (array) => {\n        var currentIndex = array.length\n          , temporaryValue\n          , randomIndex\n          ;\n    \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n    \n          // Pick a remaining element...\n          randomIndex = random.integer(0,currentIndex - 1);\n          currentIndex -= 1;\n    \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n    \n        return array;\n      };\n\n    const pushAnswers = () => {\n        answers.push(answer);\n        answersMap.set(answer, answer);\n\n        for (let i = 0; i < 3; i++) {\n            let val = random.integer(0,20);\n            if (val !== answer) {\n                answers.push(val);\n                answersMap.set(val, val)\n            }\n            else {\n                while (answersMap.has(val)) {\n                    val = random.integer(0,20);\n                }\n                answers.push(val);\n                answersMap.set(val, val);\n            }\n            \n        }\n        answers = shuffle(answers);\n    }\n\n    \n\n    // pushAnswers();\n\n    return (\n        <div>\n            <Problem_Card problem = {problem}/>\n            <Answer_Container answers = {answers}/>\n        </div>\n    );\n}\n\nexport default Problem_Container;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\n\nconst Problem_Container = () => {\n  _s();\n\n  const [isCorrect, setCorrect] = useState(false);\n  const random = new Random();\n  let type = 'addition';\n  let problem;\n  let ans;\n  let answers = []; //TODO Create function to generate problem based on problem type\n\n  const genProblem = type => {\n    let p;\n    let n;\n    let k;\n    let ans;\n    let ansArr;\n\n    switch (type) {\n      default:\n        console.log('Error with problem type.');\n        break;\n\n      case 'additionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'additionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'addition':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'subtractionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'subtractionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'subtraction':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'multiplyOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'multiplyTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'multiply':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'divideOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} / ${k} = ?`;\n        ans = n / k;\n        break;\n\n      case 'divideTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} / ${k} = ?`;\n        ans = n / k;\n        break;\n\n      case 'divide':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} / ${k} = ?`;\n        ans = n / k;\n        break;\n\n      case 'sysEq':\n        break;\n    }\n\n    ansArr = pushAnswersAndShuffle(type, ans);\n    return [p, ans, ansArr];\n  }; //TODO Create function to get problem from db if problem cannot be auto generated;\n\n\n  const getProblem = type => {}; //TODO Create function to get answer from db if answer cannot be\n\n\n  const getAnswer = type => {};\n\n  const shuffle = array => {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = random.integer(0, currentIndex - 1);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const pushAnswersAndShuffle = (type, ans) => {\n    let answersMap = new Map();\n    let ansArr = [];\n    let floor;\n    let ceil;\n    ansArr.push(ans);\n    answersMap.set(ans, ans);\n\n    switch (type) {\n      default:\n        console.log('Problem type error.');\n        break;\n\n      case 'addition':\n      case 'additionOnes':\n      case 'additionTens':\n      case 'subtraction':\n      case 'subtractionOnes':\n      case 'subtractionTens':\n      case 'multiply':\n      case 'multiplyOnes':\n      case 'multiplyTens':\n      case 'divide':\n      case 'divideOnes':\n      case 'divideTens':\n        floor = ans - 10;\n        ceil = ans + 10; // Looping the length of remaining cards to be filled after pushing correct answer to array.\n\n        for (let i = 0; i < 3; i++) {\n          let val = random.integer(floor, ceil);\n\n          if (val !== ans && !answersMap.has(val)) {\n            ansArr.push(val);\n            answersMap.set(val, val);\n          } else {\n            // While current value is already not in the array. Checks hashmap.\n            while (answersMap.has(val)) {\n              val = random.integer(floor, ceil);\n            }\n\n            ansArr.push(val);\n            answersMap.set(val, val);\n          }\n        }\n\n        break;\n    }\n\n    return shuffle(ansArr);\n  };\n\n  let problemData = genProblem(type);\n  problem = problemData[0];\n  ans = problemData[1];\n  answers = problemData[2]; // pushAnswers();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Problem_Card, {\n      problem: problem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer_Container, {\n      answers: answers,\n      corrAns: ans,\n      genProblem: genProblem(type)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Problem_Container, \"9251gkUxPxFnxwR0BF+8MPuSOQ4=\");\n\n_c = Problem_Container;\nexport default Problem_Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Problem_Container\");","map":{"version":3,"sources":["/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js"],"names":["React","useState","Problem_Card","Answer_Container","Random","Problem_Container","isCorrect","setCorrect","random","type","problem","ans","answers","genProblem","p","n","k","ansArr","console","log","integer","pushAnswersAndShuffle","getProblem","getAnswer","shuffle","array","currentIndex","length","temporaryValue","randomIndex","answersMap","Map","floor","ceil","push","set","i","val","has","problemData"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AAE5B,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMO,MAAM,GAAG,IAAIJ,MAAJ,EAAf;AACA,MAAIK,IAAI,GAAG,UAAX;AACA,MAAIC,OAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,OAAO,GAAG,EAAd,CAR4B,CAU5B;;AACA,QAAMC,UAAU,GAAGJ,IAAI,IAAI;AACvB,QAAIK,CAAJ;AACA,QAAIC,CAAJ;AACA,QAAIC,CAAJ;AACA,QAAIL,GAAJ;AACA,QAAIM,MAAJ;;AACA,YAAQR,IAAR;AACI;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA;;AACJ,WAAK,cAAL;AACIJ,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,cAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,UAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,iBAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,iBAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,aAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,cAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,cAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,UAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,YAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,CAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,YAAL;AACQD,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,EAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACR,WAAK,QAAL;AACID,QAAAA,CAAC,GAAGP,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAJ,QAAAA,CAAC,GAAGR,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiB,GAAjB,CAAJ;AACAN,QAAAA,CAAC,GAAK,GAAEC,CAAE,MAAKC,CAAE,MAAjB;AACAL,QAAAA,GAAG,GAAGI,CAAC,GAAGC,CAAV;AACA;;AACJ,WAAK,OAAL;AACI;AA7ER;;AA+EAC,IAAAA,MAAM,GAAGI,qBAAqB,CAACZ,IAAD,EAAOE,GAAP,CAA9B;AACA,WAAO,CAACG,CAAD,EAAIH,GAAJ,EAASM,MAAT,CAAP;AACH,GAvFD,CAX4B,CAqG5B;;;AACA,QAAMK,UAAU,GAAGb,IAAI,IAAI,CAE1B,CAFD,CAtG4B,CA0G5B;;;AACA,QAAMc,SAAS,GAAGd,IAAI,IAAI,CAEzB,CAFD;;AAIA,QAAMe,OAAO,GAAIC,KAAD,IAAW;AACvB,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,QACIC,cADJ;AAAA,QAEIC,WAFJ,CADuB,CAMvB;;AACA,WAAO,MAAMH,YAAb,EAA2B;AAEzB;AACAG,MAAAA,WAAW,GAAGrB,MAAM,CAACY,OAAP,CAAe,CAAf,EAAiBM,YAAY,GAAG,CAAhC,CAAd;AACAA,MAAAA,YAAY,IAAI,CAAhB,CAJyB,CAMzB;;AACAE,MAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,MAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,MAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AAED,WAAOH,KAAP;AACD,GApBH;;AAsBA,QAAMJ,qBAAqB,GAAG,CAACZ,IAAD,EAAOE,GAAP,KAAe;AACzC,QAAImB,UAAU,GAAG,IAAIC,GAAJ,EAAjB;AACA,QAAId,MAAM,GAAG,EAAb;AACA,QAAIe,KAAJ;AACA,QAAIC,IAAJ;AAEAhB,IAAAA,MAAM,CAACiB,IAAP,CAAYvB,GAAZ;AACAmB,IAAAA,UAAU,CAACK,GAAX,CAAexB,GAAf,EAAoBA,GAApB;;AAEA,YAAQF,IAAR;AACI;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA;;AACJ,WAAK,UAAL;AACA,WAAK,cAAL;AACA,WAAK,cAAL;AACA,WAAK,aAAL;AACA,WAAK,iBAAL;AACA,WAAK,iBAAL;AACA,WAAK,UAAL;AACA,WAAK,cAAL;AACA,WAAK,cAAL;AACA,WAAK,QAAL;AACA,WAAK,YAAL;AACA,WAAK,YAAL;AACIa,QAAAA,KAAK,GAAGrB,GAAG,GAAG,EAAd;AACAsB,QAAAA,IAAI,GAAGtB,GAAG,GAAG,EAAb,CAFJ,CAGI;;AACA,aAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,cAAIC,GAAG,GAAG7B,MAAM,CAACY,OAAP,CAAeY,KAAf,EAAqBC,IAArB,CAAV;;AACA,cAAII,GAAG,KAAK1B,GAAR,IAAe,CAACmB,UAAU,CAACQ,GAAX,CAAeD,GAAf,CAApB,EAAyC;AACrCpB,YAAAA,MAAM,CAACiB,IAAP,CAAYG,GAAZ;AACAP,YAAAA,UAAU,CAACK,GAAX,CAAeE,GAAf,EAAoBA,GAApB;AACH,WAHD,MAIK;AACD;AACA,mBAAOP,UAAU,CAACQ,GAAX,CAAeD,GAAf,CAAP,EAA4B;AACxBA,cAAAA,GAAG,GAAG7B,MAAM,CAACY,OAAP,CAAeY,KAAf,EAAqBC,IAArB,CAAN;AACH;;AACDhB,YAAAA,MAAM,CAACiB,IAAP,CAAYG,GAAZ;AACAP,YAAAA,UAAU,CAACK,GAAX,CAAeE,GAAf,EAAoBA,GAApB;AACH;AAEJ;;AACD;AAnCR;;AAsCA,WAAOb,OAAO,CAACP,MAAD,CAAd;AACH,GAhDD;;AAoDA,MAAIsB,WAAW,GAAG1B,UAAU,CAACJ,IAAD,CAA5B;AACAC,EAAAA,OAAO,GAAG6B,WAAW,CAAC,CAAD,CAArB;AACA5B,EAAAA,GAAG,GAAG4B,WAAW,CAAC,CAAD,CAAjB;AACA3B,EAAAA,OAAO,GAAG2B,WAAW,CAAC,CAAD,CAArB,CA5L4B,CA+L5B;;AAEA,sBACI;AAAA,4BACI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAI7B;AAAzB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,gBAAD;AAAkB,MAAA,OAAO,EAAIE,OAA7B;AAAsC,MAAA,OAAO,EAAID,GAAjD;AAAsD,MAAA,UAAU,EAAIE,UAAU,CAACJ,IAAD;AAA9E;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAvMD;;GAAMJ,iB;;KAAAA,iB;AAyMN,eAAeA,iBAAf","sourcesContent":["import React, { useState } from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\n\nconst Problem_Container = () => {\n\n    const [isCorrect, setCorrect] = useState(false);\n\n    const random = new Random();\n    let type = 'addition';\n    let problem;\n    let ans;\n    let answers = [];\n    \n    //TODO Create function to generate problem based on problem type\n    const genProblem = type => {\n        let p;\n        let n;\n        let k;\n        let ans;\n        let ansArr;\n        switch (type) {\n            default:\n                console.log('Error with problem type.');\n                break;\n            case 'additionOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'additionTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'addition': \n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'subtractionOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'subtractionTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'subtraction':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'multiplyOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'multiplyTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'multiply':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'divideOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} / ${k} = ?`;\n                ans = n / k;\n                break;\n            case 'divideTens':\n                    n = random.integer(0,99);\n                    k = random.integer(0,99);\n                    p  = `${n} / ${k} = ?`;\n                    ans = n / k;\n                    break;\n            case 'divide':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} / ${k} = ?`;\n                ans = n / k;\n                break;\n            case 'sysEq':\n                break;\n        }\n        ansArr = pushAnswersAndShuffle(type, ans);\n        return [p, ans, ansArr];\n    };\n\n\n    //TODO Create function to get problem from db if problem cannot be auto generated;\n    const getProblem = type => {\n\n    }\n\n    //TODO Create function to get answer from db if answer cannot be\n    const getAnswer = type => {\n\n    }\n\n    const shuffle = (array) => {\n        var currentIndex = array.length\n          , temporaryValue\n          , randomIndex\n          ;\n    \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n    \n          // Pick a remaining element...\n          randomIndex = random.integer(0,currentIndex - 1);\n          currentIndex -= 1;\n    \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n    \n        return array;\n      };\n\n    const pushAnswersAndShuffle = (type, ans) => {\n        let answersMap = new Map();\n        let ansArr = [];\n        let floor;\n        let ceil;\n\n        ansArr.push(ans);\n        answersMap.set(ans, ans);\n\n        switch (type){\n            default:\n                console.log('Problem type error.');\n                break;\n            case 'addition':\n            case 'additionOnes':\n            case 'additionTens':\n            case 'subtraction':\n            case 'subtractionOnes':\n            case 'subtractionTens':\n            case 'multiply':\n            case 'multiplyOnes':\n            case 'multiplyTens':\n            case 'divide':\n            case 'divideOnes':\n            case 'divideTens':\n                floor = ans - 10;\n                ceil = ans + 10;\n                // Looping the length of remaining cards to be filled after pushing correct answer to array.\n                for (let i = 0; i < 3; i++) {\n                    let val = random.integer(floor,ceil);\n                    if (val !== ans && !answersMap.has(val)) {\n                        ansArr.push(val);\n                        answersMap.set(val, val);\n                    }\n                    else {\n                        // While current value is already not in the array. Checks hashmap.\n                        while (answersMap.has(val)) {\n                            val = random.integer(floor,ceil);\n                        }\n                        ansArr.push(val);\n                        answersMap.set(val, val);\n                    }\n                    \n                }\n                break;\n        }\n\n        return shuffle(ansArr);\n    }\n\n\n\n    let problemData = genProblem(type);\n    problem = problemData[0];\n    ans = problemData[1];\n    answers = problemData[2];\n    \n\n    // pushAnswers();\n\n    return (\n        <div>\n            <Problem_Card problem = {problem}/>\n            <Answer_Container answers = {answers} corrAns = {ans} genProblem = {genProblem(type)}/>\n        </div>\n    );\n}\n\nexport default Problem_Container;"]},"metadata":{},"sourceType":"module"}
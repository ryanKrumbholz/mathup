{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\nimport { useSelector } from 'react-redux';\n\nconst Problem_Container = () => {\n  _s();\n\n  const [isCorrect, setCorrect] = useState(false);\n  const topic = useSelector(state => state.topic);\n  const random = new Random();\n  let problem;\n  let ans;\n  let answers = []; //TODO Create function to generate problem based on problem topic\n\n  const genProblem = topic => {\n    let p;\n    let n;\n    let k;\n    let ans;\n    let ansArr;\n\n    switch (topic) {\n      default:\n        console.log('Error with problem topic.');\n        break;\n\n      case 'additionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'additionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'addition':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'subtractionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'subtractionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'subtraction':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'multiplyOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'multiplyTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'multiply':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'divideOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} / ${k} = ?`;\n        ans = n / k;\n        break;\n\n      case 'divideTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} / ${k} = ?`;\n        ans = n / k;\n        break;\n\n      case 'divide':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} / ${k} = ?`;\n        ans = n / k;\n        break;\n\n      case 'sysEq':\n        break;\n    }\n\n    ansArr = pushAnswersAndShuffle(topic, ans);\n    return [p, ans, ansArr];\n  }; //TODO Create function to get problem from db if problem cannot be auto generated;\n\n\n  const getProblem = topic => {}; //TODO Create function to get answer from db if answer cannot be\n\n\n  const getAnswer = topic => {};\n\n  const shuffle = array => {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = random.integer(0, currentIndex - 1);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const pushAnswersAndShuffle = (topic, ans) => {\n    let answersMap = new Map();\n    let ansArr = [];\n    let floor;\n    let ceil;\n    ansArr.push(ans);\n    answersMap.set(ans, ans);\n\n    switch (topic) {\n      default:\n        console.log('Problem topic error.');\n        break;\n\n      case 'addition':\n      case 'additionOnes':\n      case 'additionTens':\n      case 'subtraction':\n      case 'subtractionOnes':\n      case 'subtractionTens':\n      case 'multiply':\n      case 'multiplyOnes':\n      case 'multiplyTens':\n      case 'divide':\n      case 'divideOnes':\n      case 'divideTens':\n        floor = ans - 10;\n        ceil = ans + 10; // Looping the length of remaining cards to be filled after pushing correct answer to array.\n\n        for (let i = 0; i < 3; i++) {\n          let val = random.integer(floor, ceil);\n\n          if (val !== ans && !answersMap.has(val)) {\n            ansArr.push(val);\n            answersMap.set(val, val);\n          } else {\n            // While current value is already not in the array. Checks hashmap.\n            while (answersMap.has(val)) {\n              val = random.integer(floor, ceil);\n            }\n\n            ansArr.push(val);\n            answersMap.set(val, val);\n          }\n        }\n\n        break;\n    }\n\n    return shuffle(ansArr);\n  }; // Generates new problem. Called when the correct answer is chosen.\n\n\n  const nxProblem = () => {\n    genProblem(topic);\n\n    for (let i = 0; i < 2; i++) {\n      setCorrect(!isCorrect);\n    }\n\n    ;\n  };\n\n  let problemData = genProblem(topic);\n  problem = problemData[0];\n  ans = problemData[1];\n  answers = problemData[2]; // pushAnswers();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Problem_Card, {\n      problem: problem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer_Container, {\n      answers: answers,\n      corrAns: ans,\n      nxProblem: nxProblem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Problem_Container, \"O+eTorXKVoKbvkfActS7+8FBW6U=\", false, function () {\n  return [useSelector];\n});\n\n_c = Problem_Container;\nexport default Problem_Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Problem_Container\");","map":{"version":3,"sources":["/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js"],"names":["React","useState","Problem_Card","Answer_Container","Random","useSelector","Problem_Container","isCorrect","setCorrect","topic","state","random","problem","ans","answers","genProblem","p","n","k","ansArr","console","log","integer","pushAnswersAndShuffle","getProblem","getAnswer","shuffle","array","currentIndex","length","temporaryValue","randomIndex","answersMap","Map","floor","ceil","push","set","i","val","has","nxProblem","problemData"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\nimport { useSelector } from 'react-redux';\n\nconst Problem_Container = () => {\n\n    const [isCorrect, setCorrect] = useState(false);\n    const topic = useSelector(state => state.topic);\n    const random = new Random();\n    let problem;\n    let ans;\n    let answers = [];\n    \n    //TODO Create function to generate problem based on problem topic\n    const genProblem = topic => {\n        let p;\n        let n;\n        let k;\n        let ans;\n        let ansArr;\n        switch (topic) {\n            default:\n                console.log('Error with problem topic.');\n                break;\n            case 'additionOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'additionTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'addition': \n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'subtractionOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'subtractionTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'subtraction':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'multiplyOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'multiplyTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'multiply':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'divideOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} / ${k} = ?`;\n                ans = n / k;\n                break;\n            case 'divideTens':\n                    n = random.integer(0,99);\n                    k = random.integer(0,99);\n                    p  = `${n} / ${k} = ?`;\n                    ans = n / k;\n                    break;\n            case 'divide':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} / ${k} = ?`;\n                ans = n / k;\n                break;\n            case 'sysEq':\n                break;\n        }\n        ansArr = pushAnswersAndShuffle(topic, ans);\n        return [p, ans, ansArr];\n    };\n\n\n    //TODO Create function to get problem from db if problem cannot be auto generated;\n    const getProblem = topic => {\n\n    }\n\n    //TODO Create function to get answer from db if answer cannot be\n    const getAnswer = topic => {\n\n    }\n\n    const shuffle = (array) => {\n        var currentIndex = array.length\n          , temporaryValue\n          , randomIndex\n          ;\n    \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n    \n          // Pick a remaining element...\n          randomIndex = random.integer(0,currentIndex - 1);\n          currentIndex -= 1;\n    \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n    \n        return array;\n      };\n\n    const pushAnswersAndShuffle = (topic, ans) => {\n        let answersMap = new Map();\n        let ansArr = [];\n        let floor;\n        let ceil;\n\n        ansArr.push(ans);\n        answersMap.set(ans, ans);\n\n        switch (topic){\n            default:\n                console.log('Problem topic error.');\n                break;\n            case 'addition':\n            case 'additionOnes':\n            case 'additionTens':\n            case 'subtraction':\n            case 'subtractionOnes':\n            case 'subtractionTens':\n            case 'multiply':\n            case 'multiplyOnes':\n            case 'multiplyTens':\n            case 'divide':\n            case 'divideOnes':\n            case 'divideTens':\n                floor = ans - 10;\n                ceil = ans + 10;\n                // Looping the length of remaining cards to be filled after pushing correct answer to array.\n                for (let i = 0; i < 3; i++) {\n                    let val = random.integer(floor,ceil);\n                    if (val !== ans && !answersMap.has(val)) {\n                        ansArr.push(val);\n                        answersMap.set(val, val);\n                    }\n                    else {\n                        // While current value is already not in the array. Checks hashmap.\n                        while (answersMap.has(val)) {\n                            val = random.integer(floor,ceil);\n                        }\n                        ansArr.push(val);\n                        answersMap.set(val, val);\n                    }\n                    \n                }\n                break;\n        }\n\n        return shuffle(ansArr);\n    }\n\n\n    // Generates new problem. Called when the correct answer is chosen.\n    const nxProblem = () => {\n        genProblem(topic);\n        for (let i = 0; i < 2; i++) {setCorrect(!isCorrect)};\n    }\n\n\n    let problemData = genProblem(topic);\n    problem = problemData[0];\n    ans = problemData[1];\n    answers = problemData[2];\n    \n\n    // pushAnswers();\n\n    return (\n        <div>\n            <Problem_Card problem = {problem}/>\n            <Answer_Container answers = {answers} corrAns = {ans} nxProblem = {nxProblem}/>\n        </div>\n    );\n}\n\nexport default Problem_Container;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js\";\nimport React from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\n\nconst Problem_Container = () => {\n  const random = new Random();\n  let problem;\n  let answer;\n  let answers = []; //TODO Create function to generate problem based on problem type\n\n  const genProblem = type => {\n    let p;\n    let n;\n    let k;\n    let ans;\n    let ansArr = [];\n\n    switch (type) {\n      default:\n        console.log('Error with problem type.');\n        break;\n\n      case 'additionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'additionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'addition':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} + ${k} = ?`;\n        ans = n + k;\n        break;\n\n      case 'subtractionOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'subtractionTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'subtraction':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} - ${k} = ?`;\n        ans = n - k;\n        break;\n\n      case 'multiplyOnes':\n        n = random.integer(0, 9);\n        k = random.integer(0, 9);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'multiplyTens':\n        n = random.integer(0, 99);\n        k = random.integer(0, 99);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'multiply':\n        n = random.integer(0, 999);\n        k = random.integer(0, 999);\n        p = `${n} x ${k} = ?`;\n        ans = n * k;\n        break;\n\n      case 'sysEq':\n        break;\n    }\n\n    return [p, ans, ansArr];\n  }; //TODO Create function to potential answers to problem\n\n\n  const genWrongAnswers = (type, answer) => {// return WrongAnswers;\n  }; //Todo Create function to generate answer for problem\n\n\n  const genAnswer = (type, problem) => {}; //TODO Create function to get problem from db if problem cannot be auto generated;\n\n\n  const getProblem = type => {}; //TODO Create function to get answer from db if answer cannot be\n\n\n  const getAnswer = type => {};\n\n  const shuffle = array => {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = random.integer(0, currentIndex - 1);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  };\n\n  const pushAnswersAndShuffle = type => {\n    let answersMap = new Map();\n    let ansArr = [];\n    let ceil;\n    ansArr.push(answer);\n    answersMap.set(answer, answer);\n\n    for (let i = 0; i < 3; i++) {\n      let val = random.integer(0, ceil);\n\n      if (val !== answer) {\n        ansArr.push(val);\n        answersMap.set(val, val);\n      } else {\n        while (answersMap.has(val)) {\n          val = random.integer(0, 20);\n        }\n\n        ansArr.push(val);\n        answersMap.set(val, val);\n      }\n    }\n\n    return shuffle(ansArr);\n  };\n\n  let problemData = genProblem('multiply');\n  problem = problemData[0];\n  answers = problemData[2]; // pushAnswers();\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Problem_Card, {\n      problem: problem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Answer_Container, {\n      answers: answers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Problem_Container;\nexport default Problem_Container;\n\nvar _c;\n\n$RefreshReg$(_c, \"Problem_Container\");","map":{"version":3,"sources":["/Users/ryankrumbholz/OneDrive/development/mathup/mathup-client/src/components/Problem_Container/Problem_Container.js"],"names":["React","Problem_Card","Answer_Container","Random","Problem_Container","random","problem","answer","answers","genProblem","type","p","n","k","ans","ansArr","console","log","integer","genWrongAnswers","genAnswer","getProblem","getAnswer","shuffle","array","currentIndex","length","temporaryValue","randomIndex","pushAnswersAndShuffle","answersMap","Map","ceil","push","set","i","val","has","problemData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Problem_Card from '../Problem_Card/Problem_Card';\nimport Answer_Container from '../Answer_Container/Answer_Container';\nimport { Random } from \"random-js\";\n\nconst Problem_Container = () => {\n\n    const random = new Random();\n    let problem;\n    let answer;\n    let answers = [];\n    \n    //TODO Create function to generate problem based on problem type\n    const genProblem = type => {\n        let p;\n        let n;\n        let k;\n        let ans;\n        let ansArr = [];\n        switch (type) {\n            default:\n                console.log('Error with problem type.');\n                break;\n            case 'additionOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'additionTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'addition': \n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} + ${k} = ?`;\n                ans = n + k;\n                break;\n            case 'subtractionOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'subtractionTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'subtraction':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} - ${k} = ?`;\n                ans = n - k;\n                break;\n            case 'multiplyOnes':\n                n = random.integer(0,9);\n                k = random.integer(0,9);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'multiplyTens':\n                n = random.integer(0,99);\n                k = random.integer(0,99);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'multiply':\n                n = random.integer(0,999);\n                k = random.integer(0,999);\n                p  = `${n} x ${k} = ?`;\n                ans = n * k;\n                break;\n            case 'sysEq':\n                break;\n        }\n        return [p, ans, ansArr];\n    };\n\n    //TODO Create function to potential answers to problem\n    const genWrongAnswers = (type, answer) => {\n        // return WrongAnswers;\n    };\n\n    //Todo Create function to generate answer for problem\n    const genAnswer = (type, problem) => {\n\n    }\n\n    //TODO Create function to get problem from db if problem cannot be auto generated;\n    const getProblem = type => {\n\n    }\n\n    //TODO Create function to get answer from db if answer cannot be\n    const getAnswer = type => {\n\n    }\n\n    const shuffle = (array) => {\n        var currentIndex = array.length\n          , temporaryValue\n          , randomIndex\n          ;\n    \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n    \n          // Pick a remaining element...\n          randomIndex = random.integer(0,currentIndex - 1);\n          currentIndex -= 1;\n    \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n    \n        return array;\n      };\n\n    const pushAnswersAndShuffle = (type) => {\n        let answersMap = new Map();\n        let ansArr = [];\n        let ceil;\n\n        ansArr.push(answer);\n        answersMap.set(answer, answer);\n\n        for (let i = 0; i < 3; i++) {\n            let val = random.integer(0,ceil);\n            if (val !== answer) {\n                ansArr.push(val);\n                answersMap.set(val, val);\n            }\n            else {\n                while (answersMap.has(val)) {\n                    val = random.integer(0,20);\n                }\n                ansArr.push(val);\n                answersMap.set(val, val);\n            }\n            \n        }\n        return shuffle(ansArr);\n    }\n\n    let problemData = genProblem('multiply');\n    problem = problemData[0];\n    answers = problemData[2];\n    \n\n    // pushAnswers();\n\n    return (\n        <div>\n            <Problem_Card problem = {problem}/>\n            <Answer_Container answers = {answers}/>\n        </div>\n    );\n}\n\nexport default Problem_Container;"]},"metadata":{},"sourceType":"module"}